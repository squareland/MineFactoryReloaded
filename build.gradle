import java.util.regex.Pattern

// This simple grabs the latest 'forge' plugin, or ForgeGradle, from Forge's servers.
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

// We apply the 'forge' plugin, so ForgeGradle can do it's stuff.
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

group = 'powercrystals' // Your main package.
archivesBaseName = 'MineFactoryReloaded'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.mod_version = pullVersion()

repositories {
    maven {
        name = "ChickenBones repo"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net/"
    }
    maven {
        name = "Player's Maven"
        url = "http://maven.ic2.player.to/"
    }
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven {
        name "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
}

dependencies {
    compile "codechicken:CodeChickenLib:${mc_version}-${ccl_version}:deobf"
    compile "cofh:CoFHCore:${mc_version}-${cofhcore_version}:deobf"
    compile "cofh:RedstoneFlux:${rf_mc_version}-${rf_version}:deobf"
    compile "cofh:CoFHWorld:${mc_version}-${cofhworld_version}:deobf"
    compile "net.industrial-craft:industrialcraft-2:${ic2_version}"
    compile "net.sengir.forestry:forestry_${mc_version}:${forestry_version}"
    //deobfCompile "com.mod-buildcraft:buildcraft-api:${buildcraft_version}"
    //deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}"
}
version = "${mod_version}." + (System.getenv("BUILD_NUMBER") ?: "1")

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    dependencies {
        java {
            srcDir 'src/dependencies/java/'
        }
        compileClasspath += sourceSets.api.compileClasspath
    }
    core {
        java {
            srcDir 'src/core/java'
        }
        resources {
            srcDir 'src/core/resources'
        }
        compileClasspath += sourceSets.api.compileClasspath
    }
    compat {
        java {
            srcDir 'src/compat/java'
        }
        compileClasspath += sourceSets.api.compileClasspath
        compileClasspath += sourceSets.api.output
        compileClasspath += sourceSets.dependencies.output
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
        compileClasspath += sourceSets.api.output
        compileClasspath += sourceSets.core.output
        compileClasspath += sourceSets.dependencies.output
    }
    doLast {

        // hey, guess what: forgegradle is broken and evaluates a fixed sourceSet name (`main`: no matter what) at `apply plugin:`
        // this *could* be solved by defining it before then, but we need things they set to actually work, and they crash if we define `api` before they force-define it
        // so now we have to use their magic names and hope they don't change to add our stuff to their sets!
        // i want ant back
        reobfJar.classpath += sourceSets.core.output
        reobfJar.classpath += sourceSets.api.output
        reobfJar.classpath += sourceSets.dependencies.output
    }
}

minecraft {
    version = mc_version + "-" + forge_version
    mappings = mcp_mappings
    runDir = "run"
    replace '${mod_version}', mod_version
    makeObfSourceJar = false
}

version = "${project.minecraft.version}-${project.version}"

processResources {
    filesMatching(['mcmod.info', '**/*.MF'], {
        it.expand 'core_version': "${mfr_core_version}", 'version': "${mod_version}", 'mc_version': "${mc_version}"
    })
    filesMatching('META-INF/libraries/*.MF', {
        // cannot do `rename` on the base closure: that renames *all* .MF files, even though we're filtered
        it.setName(it.getName().replaceAll('^(.+).MF$', '$1.meta'))
    })
}

processCoreResources {
    // hey, you know what's *NOT* possible? code re-use! just copy-paste everything!
    filesMatching(['mcmod.info', '**/*.MF'], {
        it.expand 'core_version': "${mfr_core_version}", 'version': "${mod_version}", 'mc_version': "${mc_version}"
    })
    filesMatching('META-INF/libraries/*.MF', {
        // cannot do `rename` on the base closure: that renames *all* .MF files, even though we're filtered
        it.setName(it.getName().replaceAll('^(.+).MF$', '$1.meta'))
    })
}

task coreJar(type: Jar) {
    from sourceSets.core.output
    appendix = 'core'
    version = "${mfr_core_version}"
    manifest { from sourceSets.core.output.resourcesDir.toString() + '/META-INF/MANIFEST.MF' }
}

task moveCore {
    dependsOn 'coreJar'
    doLast {
        // ??? really? "We don't support this, but we integrate with our competitor so you can do it with them through us!"
        // seriously, i just want rid of this shit and to use ant for everything again.
        ant.move file: coreJar.archivePath,
                todir: sourceSets.main.output.resourcesDir.toString() + '/META-INF/libraries'
    }
}

jar {
    dependsOn 'moveCore'
    from([sourceSets.api.output, sourceSets.compat.output]) // this is a +=
    classifier = 'universal'
    manifest { from sourceSets.main.output.resourcesDir.toString() + '/META-INF/MANIFEST.MF' }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest = jar.manifest
}

task srcJar(type: Jar) {
    from([sourceSets.api.allSource, sourceSets.api.output])
    classifier = 'api'
}

// Tell the artifact system about our extra jars
artifacts {
    archives deobfJar
    archives srcJar
}

def pullVersion() {
    def file = file("src/main/java/powercrystals/minefactoryreloaded/MFRProps.java")
    def version = ""
    def pattern = Pattern.compile("VERSION = \"([^\"]*)\";")
    file.eachLine { String s ->
        def matcher = pattern.matcher(s)
        if (matcher.find()) {
            version = matcher.group(1)
            return
        }
    }
    return version
}

// Configure an upload task.
uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven")) {
                repository(url: "file://${local_maven}")
                pom {
                    groupId = project.group
                    // Force the maven upload to use the <mcversion>-<version> syntax preferred at files
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'MinefactoryReloaded'
                        url 'https://github.com/skyboy/MinefactoryReloaded'

                        scm {
                            url 'https://github.com/skyboy/MinefactoryReloaded'
                            connection 'scm:git:git://github.com/skyboy/MinefactoryReloaded.git'
                            developerConnection 'scm:git:git@github.com:skyboy/MinefactoryReloaded.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/skyboy/MinefactoryReloaded/issues'
                        }
                    }
                }
            }
        }
	}
}
